module Base.Relation where

open import Base.Level
  as Level
open import Base.Type
open import Base.Type.Negation
open import Base.Equality.Core
  as ‚â°
  hiding ( refl
         )
open import Base.Unit.Core
open import Base.FromNat
open import Base.Decide

Relation : ‚àÄ {‚Ñì‚ÇÅ} ‚Ñì‚ÇÇ ‚Üí Type ‚Ñì‚ÇÅ ‚Üí Type (‚Ñì‚ÇÅ ‚äî Level.succ ‚Ñì‚ÇÇ)
Relation ‚Ñì‚ÇÇ A = A ‚Üí A ‚Üí Type ‚Ñì‚ÇÇ

module _ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Type ‚Ñì‚ÇÅ} (_~_ : A ‚Üí A ‚Üí Type ‚Ñì‚ÇÇ) where

  record Reflexive : Type (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
    constructor intro
    field
      refl : ‚àÄ {x} ‚Üí x ~ x
  open Reflexive ‚¶É...‚¶Ñ public

  record Symmetric : Type (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
    constructor intro
    field
      sym : ‚àÄ {x y} ‚Üí x ~ y ‚Üí y ~ x
  open Symmetric ‚¶É...‚¶Ñ public

  record Transitive : Type (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
    constructor intro
    field
      trans : ‚àÄ {x y z} ‚Üí x ~ y ‚Üí y ~ z ‚Üí x ~ z
  open Transitive ‚¶É...‚¶Ñ public

  record Preorder : Type (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
    constructor intro
    field
      ‚¶É reflexive ‚¶Ñ : Reflexive
      ‚¶É transitive ‚¶Ñ : Transitive
  open Preorder ‚¶É...‚¶Ñ public

  record Equivalence : Type (‚Ñì‚ÇÅ ‚äî ‚Ñì‚ÇÇ) where
    constructor intro
    field
      ‚¶É preorder ‚¶Ñ : Preorder
      ‚¶É symmetric ‚¶Ñ : Symmetric
  open Equivalence ‚¶É...‚¶Ñ public

instance
  Symmetric:¬¨ :
    ‚àÄ {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ}
      {A : Type ‚Ñì‚ÇÅ} {_~_ : Relation ‚Ñì‚ÇÇ A}
      ‚¶É _ : Symmetric _~_ ‚¶Ñ
    ‚Üí Symmetric (Œª x y ‚Üí ¬¨ x ~ y)
  Symmetric:¬¨ = intro (contramap sym)

module PreorderReasoning {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Type ‚Ñì‚ÇÅ} (_‚â≤_ : Relation ‚Ñì‚ÇÇ A) ‚¶É _ : Preorder _‚â≤_ ‚¶Ñ where

  infix  3 _‚àé
  infixr 2 _‚â≤‚ü®_‚ü©_ _‚â≤‚ü®‚ü©_ _‚â°‚ü®_‚ü©_

  begin_ : {x y : A} ‚Üí x ‚â≤ y ‚Üí x ‚â≤ y
  begin x‚â≤y = x‚â≤y

  _‚â≤‚ü®_‚ü©_ : (x {y z} : A) ‚Üí x ‚â≤ y ‚Üí y ‚â≤ z ‚Üí x ‚â≤ z
  _ ‚â≤‚ü® x‚â≤y ‚ü© y‚â≤z = trans x‚â≤y y‚â≤z

  _‚â°‚ü®_‚ü©_ : (x {y z} : A) ‚Üí x ‚â° y ‚Üí y ‚â≤ z ‚Üí x ‚â≤ z
  _ ‚â°‚ü® ‚â°.refl ‚ü© x‚â≤z = x‚â≤z

  _‚â≤‚ü®‚ü©_ : (x {y} : A) ‚Üí x ‚â≤ y ‚Üí x ‚â≤ y
  _ ‚â≤‚ü®‚ü© x‚â≤y = x‚â≤y

  _‚àé : (x : A) ‚Üí x ‚â≤ x
  _‚àé _ = refl

module EquivalenceReasoning {‚Ñì‚ÇÅ ‚Ñì‚ÇÇ} {A : Type ‚Ñì‚ÇÅ} (_~_ : Relation ‚Ñì‚ÇÇ A) ‚¶É _ : Equivalence _~_ ‚¶Ñ where

  infixr 2 _~‚ü®_‚ü©‚Åª¬π_

  open PreorderReasoning _~_
    public
    renaming ( _‚â≤‚ü®_‚ü©_ to _~‚ü®_‚ü©_
             ; _‚â≤‚ü®‚ü©_  to _~‚ü®‚ü©_
             )

  _~‚ü®_‚ü©‚Åª¬π_ : (x {y z} : A) ‚Üí y ~ x ‚Üí y ~ z ‚Üí x ~ z
  _ ~‚ü® y~x ‚ü©‚Åª¬π y~z = trans (sym y~x) y~z

module _ {‚Ñì} {A : Type ‚Ñì} where

  Trivial : Relation 0 A
  Trivial = Œª _ _ ‚Üí ùüô

  instance
    Reflexive:Trivial : Reflexive Trivial
    Reflexive:Trivial = _

    Symmetric:Trivial : Symmetric Trivial
    Symmetric:Trivial = _

    Transitive:Trivial : Transitive Trivial
    Transitive:Trivial = _

    Preorder:Trivial : Preorder Trivial
    Preorder:Trivial = _

    Equivalence:Trivial : Equivalence Trivial
    Equivalence:Trivial = _

    Decide:Trivial : ‚àÄ {x y} ‚Üí Decide (Trivial x y)
    Decide:Trivial = yes _
